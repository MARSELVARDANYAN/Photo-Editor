import axios from 'axios';
import dotenv from 'dotenv';
import sharp from 'sharp';

dotenv.config();

const MODEL_NAME = "kandinsky-community/kandinsky-3";
const HF_API_URL = `https://api-inference.huggingface.co/models/${MODEL_NAME}`;

export default async function generateKandinskyImage(prompt) {
  try {
    const payload = {
      inputs: prompt,
      parameters: {
        negative_prompt: "low quality, deformed, blurry, text, watermark, signature, cropped",
        num_inference_steps: 50, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        guidance_scale: 7.5,
        height: 1024, // Kandinsky 3 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        width: 1024,
        prior_guidance_scale: 4.0, // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è Kandinsky 3
        prior_num_inference_steps: 25
      },
      options: {
        wait_for_model: true, // –í–∞–∂–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π
        use_cache: true,
      }
    };

    console.log(`üü° Sending request to Hugging Face for ${MODEL_NAME}...`);
    
    const response = await axios.post(HF_API_URL, payload, {
      headers: {
        Authorization: `Bearer ${process.env.HF_API_KEY}`,
        Accept: 'image/png',
      },
      responseType: 'arraybuffer',
      timeout: 180000, // 3 –º–∏–Ω—É—Ç—ã - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–æ–π
    });

    console.log('üü¢ Received image from Hugging Face');

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const optimizedImage = await sharp(response.data)
      .jpeg({ quality: 90, progressive: true }) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 1024x1024
      .toBuffer();

    return {
      success: true,
      image: `data:image/jpeg;base64,${optimizedImage.toString('base64')}`
    };
    
  } catch (error) {
    console.error('‚ùå Kandinsky 3 generation error:', error);
    
    let errorMessage = 'Failed to generate image';
    let errorDetails = '';
    
    if (error.response) {
      const status = error.response.status;
      errorDetails = `Status: ${status}`;
      
      if (status === 429) {
        errorMessage = 'Too many requests. Please try again later.';
      } else if (status === 503) {
        errorMessage = 'Model is loading. Please wait and try again.';
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        try {
          const errorData = JSON.parse(Buffer.from(error.response.data).toString());
          if (errorData.estimated_time) {
            errorMessage += ` Estimated wait time: ${Math.ceil(errorData.estimated_time)} seconds.`;
          }
        } catch (e) {}
      } else if (status === 400) {
        errorMessage = 'Invalid request. Please check your prompt.';
      } else if (status === 404) {
        errorMessage = 'Model not found. Please check the model name.';
      }
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
      try {
        const errorData = JSON.parse(Buffer.from(error.response.data).toString());
        errorMessage = errorData.error || errorData.message || errorMessage;
        errorDetails += ` | ${JSON.stringify(errorData)}`;
      } catch (e) {
        errorDetails += ` | Response data: ${Buffer.from(error.response.data).toString('utf8').substring(0, 200)}`;
      }
    } else if (error.request) {
      errorDetails = 'No response received from server';
    } else {
      errorDetails = error.message;
    }
    
    console.error(`‚ùå Details: ${errorDetails}`);
    
    return {
      success: false,
      message: errorMessage
    };
  }
}